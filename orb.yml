version: 2.1
description: Cloud Native Buildpacks Orb

display:
  source_url: "https://github.com/buildpacks/pack-orb"
  home_url: "https://buildpacks.io/"

orbs:
  docker: circleci/docker@1.2.1
  orb-tools: circleci/orb-tools@9.1.0
jobs:
  build:
    description: "Build OCI Image"
    machine:
      image: << parameters.executor-image >>
    parameters:
      working-directory:
        type: string
        description: The directory where the app source is located.
        default: ""
      image-name:
        type: string
        description: Image name (aka tag) of the app image to be produced.
      image-file:
        type: string
        description: Filename to save the app image as locally.
        default: "image.tgz"
      builder:
        type: string
        description: Builder image name to use.
      buildpack:
        type: string
        description: Explicit buildpack to use for building.
        default: ""
      env-vars:
        type: string
        description: Build-time environment variables. Semicolon (;) delimited.
        default: ""
      version:
        type: string
        description: Version of 'pack' to use.
        default: 0.13.1
      executor-image:
        type: string
        description: Image to execute 'pack' in.
        default: ubuntu-2004:202010-01
    steps:
      - run: sudo chown -R circleci /var/lib/docker/volumes
      - install-pack:
          version: << parameters.version >>
      - checkout
      - pack-build:
          working-directory: << parameters.working-directory >>
          image-name: << parameters.image-name >>
          builder: << parameters.builder >>
          buildpack: << parameters.buildpack >>
          env-vars: << parameters.env-vars >>
      - save-image-to-workspace:
          image-name: << parameters.image-name >>
          image-file: << parameters.image-file >>
commands:
  save-image-to-workspace:
    description: "Save image"
    parameters:
      image-name:
        type: string
      image-file:
        type: string
        default: image.tgz
    steps:
      - run:
          name: Save image to workspace
          command: |
            mkdir -p images
            docker save -o images/<< parameters.image-file >> << parameters.image-name >>
      - persist_to_workspace:
          root: .
          paths:
            - ./
  pack-build:
    description: "Run pack build"
    parameters:
      working-directory:
        type: string
      image-name:
        type: string
      builder:
        type: string
      buildpack:
        type: string
      env-vars:
        type: string
    steps:
      - restore_cache:
          key: pack-cache-<< parameters.image-name >>-<< parameters.builder >>-{{ arch }}
      - run:
          name: Run pack build
          command: |
            ENV_VARS=""

            in="<< parameters.env-vars >>"
            IFS=';' list=($in)
            for item in "${list[@]}"; do
              case "$item" in
                 *\ * )
                      IFS='='
                      read -a strarr \<<<"$item"
                      ENV_VARS="--env ${strarr[0]}=\"${strarr[1]}\" ${ENV_VARS}"
                      unset IFS
                      ;;
                   *)
                      ENV_VARS="--env ${item} ${ENV_VARS}"
                      ;;
              esac
            done

            WORKING_DIRECTORY=$(if [ -n "<< parameters.working-directory >>" ]; then echo -n "--path << parameters.working-directory >>"; else echo -n ""; fi)
            BUILD_PACK_ARG=$(if [ -n "<< parameters.buildpack >>" ]; then echo -n "--buildpack << parameters.buildpack >>"; else echo -n ""; fi)

            eval pack build << parameters.image-name >> --builder << parameters.builder >> "${WORKING_DIRECTORY}" "${BUILD_PACK_ARG}" "${ENV_VARS}"
      - save_cache:
          key: pack-cache-<< parameters.image-name >>-<< parameters.builder >>-{{ arch }}-{{ epoch }}
          paths:
            - /var/lib/docker/volumes/
  install-pack:
    description: "Setup and install pack"
    parameters:
      install-dir:
        default: ~/bin
        description: |
          Directory in which to install Pack binary
        type: string
      version:
        type: string
        default: 0.13.1
    steps:
      - run:
          name: "Setup and install pack"
          command: |
            mkdir -p << parameters.install-dir >>
            curl -L "https://github.com/buildpack/pack/releases/download/v<< parameters.version >>/pack-v<< parameters.version >>-linux.tgz" | tar xzm -C << parameters.install-dir >>
            export PATH="$PATH:<< parameters.install-dir >>"
            mkdir -p ~/.docker/
            if [ ! -f ~/.docker/config.json ]; then
              echo "{}" > ~/.docker/config.json
            fi

examples:
  heroku:
    description: Run the Heroku Buildpacks
    usage:
      version: 2.1
      orbs:
        buildpacks: buildpacks/pack@x.y.z
      workflows:
        main:
          jobs:
            - buildpacks/build:
                image-name: myimage
                builder: heroku/buildpacks:18
  use-buildpack:
    description: Run the Heroku Buildpacks
    usage:
      version: 2.1
      orbs:
        buildpacks: buildpacks/pack@x.y.z
      workflows:
        main:
          jobs:
            - buildpacks/build:
                image-name: myimage
                builder: heroku/buildpacks:18
                buildpack: heroku/ruby
  build-and-publish:
    description: Run the Heroku Buildpacks
    usage:
      version: 2.1
      orbs:
        buildpacks: buildpacks/pack@x.y.z
      jobs:
        publish:
          machine: true
          steps:
            - attach_workspace:
                at: /tmp/workspace
            - run:
                command: |
                  docker load -i /tmp/workspace/images/myimage.tgz
                  docker push myimage
      workflows:
        main:
          jobs:
            - buildpacks/build:
                image-name: myimage
                image-file: myimage.tgz
                builder: heroku/buildpacks:18
            - publish:
                requires:
                  - buildpacks/build
